<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\power.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\power.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Sat Jun 25 16:16:12 2022
<BR><P>
<H3>Maximum Stack Usage =        104 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Oled_Displayroutine &rArr; OLED_DisplayNumber &rArr; OLED_DisplayChar &rArr; OLED_GoToNextLine &rArr; OLED_SetCursor &rArr; oledSendCommand &rArr; oledSendByte
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[24a9568]">Reset_Handler</a>
 <LI><a href="#[24a95a4]">__user_initial_stackheap</a>
 <LI><a href="#[24a97c0]">Undef_Handler</a>
 <LI><a href="#[24a9784]">SWI_Handler</a>
 <LI><a href="#[24a9748]">PAbt_Handler</a>
 <LI><a href="#[24a970c]">DAbt_Handler</a>
 <LI><a href="#[24a96d0]">IRQ_Handler</a>
 <LI><a href="#[24a9694]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[24a97c0]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24a97c0]">Undef_Handler</a><BR>
 <LI><a href="#[24a9784]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24a9784]">SWI_Handler</a><BR>
 <LI><a href="#[24a9748]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24a9748]">PAbt_Handler</a><BR>
 <LI><a href="#[24a970c]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24a970c]">DAbt_Handler</a><BR>
 <LI><a href="#[24a96d0]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24a96d0]">IRQ_Handler</a><BR>
 <LI><a href="#[24a9694]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24a9694]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24a9568]">Reset_Handler</a>
 <LI><a href="#[24a97c0]">Undef_Handler</a>
 <LI><a href="#[24a9784]">SWI_Handler</a>
 <LI><a href="#[24a9748]">PAbt_Handler</a>
 <LI><a href="#[24a970c]">DAbt_Handler</a>
 <LI><a href="#[24a96d0]">IRQ_Handler</a>
 <LI><a href="#[24a9694]">FIQ_Handler</a>
 <LI><a href="#[253019c]">__main</a>
 <LI><a href="#[24a7a38]">main</a>
 <LI><a href="#[252bcb4]">__I$use$semihosting</a>
 <LI><a href="#[24a3898]">Timer0ISR</a>
 <LI><a href="#[24a385c]">Timer1ISR</a>
 <LI><a href="#[24a3820]">UART0ISR</a>
 <LI><a href="#[24a37e4]">UART1ISR</a>
 <LI><a href="#[24a38d4]">RTC_ISR</a>
 <LI><a href="#[24a3910]">Exint0ISR</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[24a9568]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[253019c]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2529680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2530070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2529680]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[253019c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2529644]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2530070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2529608]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[25297ac]"></a>__decompress</STRONG> (ARM, 68 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[2529770]"></a>__decompress0</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[2529464]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[252ec84]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Calls]<UL><LI><a href="#[252c704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[252f9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[252cdd0]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[252ce48]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[252d208]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[252d0a0]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[252cce0]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[252cd58]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[252d118]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[252d028]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[252d604]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[252d460]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[252d3e8]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[252d370]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[252d2f8]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[252d280]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[252d514]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[252cca4]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[252d190]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[252cfb0]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[252d58c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[252b084]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[252c3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[2529d4c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[2529b6c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[2529b30]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2529c98]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[2529e00]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[2529c20]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[2530070]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2529644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[253019c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[252fa58]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[252f6d4]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[252f47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[252f9a4]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[252ec84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[252f9e0]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[252f8f0]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[252f314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[252f92c]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[252e504]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[252f314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[252c3f8]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[252b084]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[252c434]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[252c3bc]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[252c614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[24a95a4]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[252f47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2530c64]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[2530c28]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[24a73e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WifiCmd
<LI><a href="#[24a745c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXDECODERS484DATA
</UL>

<P><STRONG><a name="[2530304]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[25302c8]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[253028c]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[252f47c]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[24a95a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[252e5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[252f6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[252f314]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[252e504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[252f29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[252f8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[252e630]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[252e5f4]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[252f47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[252e5b8]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[252c614]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[252c3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[252bcb4]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[252bc78]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2530bec]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[2530bb0]"></a>__aeabi_uidivmod</STRONG> (ARM, 28 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[2530ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[2530cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div4
<LI><a href="#[2530d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[24a3898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0ISR
<LI><a href="#[24a73e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WifiCmd
<LI><a href="#[2531858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisplayNumber
<LI><a href="#[253343c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreamentDigit
</UL>

<P><STRONG><a name="[24a14bc]"></a>ASCChecksum</STRONG> (ARM, 84 bytes, Stack size 16 bytes, powermeter.o(i.ASCChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ASCChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[24a736c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitRequestPF
</UL>

<P><STRONG><a name="[24a79c0]"></a>App_Init_PowerON</STRONG> (ARM, 28 bytes, Stack size 0 bytes, app_layer_2.o(i.App_Init_PowerON))
<BR><BR>[Called By]<UL><LI><a href="#[24a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[249fc20]"></a>BlinkCursorRoutine</STRONG> (ARM, 48 bytes, Stack size 8 bytes, lcd_driver_4line.o(i.BlinkCursorRoutine))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BlinkCursorRoutine &rArr; goto_cursor &rArr; lcd_write_control &rArr; lcd_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[249f9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_control
<LI><a href="#[249fb30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[24a5134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[25333c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionOfCursor
</UL>

<P><STRONG><a name="[249fba8]"></a>CursorBlinkOff</STRONG> (ARM, 24 bytes, Stack size 4 bytes, lcd_driver_4line.o(i.CursorBlinkOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CursorBlinkOff &rArr; OffCursor &rArr; lcd_write_control &rArr; lcd_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[249f9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_control
<LI><a href="#[249fb6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[24a7678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyscanRoutine_Change
</UL>

<P><STRONG><a name="[24a7948]"></a>CursorBlinkRoutine</STRONG> (ARM, 16 bytes, Stack size 8 bytes, app_layer_2.o(i.CursorBlinkRoutine))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CursorBlinkRoutine &rArr; PositionOfCursor &rArr; BlinkCursorRoutine &rArr; goto_cursor &rArr; lcd_write_control &rArr; lcd_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[25333c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionOfCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[24a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24a5f44]"></a>DecToASCIIFun</STRONG> (ARM, 312 bytes, Stack size 0 bytes, esp8266.o(i.DecToASCIIFun))
<BR><BR>[Called By]<UL><LI><a href="#[24a5f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESPRxDecoder
</UL>

<P><STRONG><a name="[249de20]"></a>EEPROMI2CDelay</STRONG> (ARM, 24 bytes, Stack size 0 bytes, iic_module.o(i.EEPROMI2CDelay))
<BR><BR>[Called By]<UL><LI><a href="#[249db50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
<LI><a href="#[249db8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
<LI><a href="#[249dbc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nack
<LI><a href="#[249dc04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ack
<LI><a href="#[249dc40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
<LI><a href="#[249dcb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max73290_IIC_Write
<LI><a href="#[249dcf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max73290_IIC_Read
<LI><a href="#[249dda8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cread_byte
<LI><a href="#[249dde4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
<LI><a href="#[24a7858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
</UL>

<P><STRONG><a name="[24a5f08]"></a>ESPRxDecoder</STRONG> (ARM, 6268 bytes, Stack size 8 bytes, esp8266.o(i.ESPRxDecoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ESPRxDecoder
</UL>
<BR>[Calls]<UL><LI><a href="#[24a5f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecToASCIIFun
</UL>
<BR>[Called By]<UL><LI><a href="#[24a37e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1ISR
</UL>

<P><STRONG><a name="[24a7ab0]"></a>Eeprom_Intern_Delay</STRONG> (ARM, 48 bytes, Stack size 0 bytes, main.o(i.Eeprom_Intern_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[24a73a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecialHandler
<LI><a href="#[24a8758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColdJnDegFunction
</UL>

<P><STRONG><a name="[24a3910]"></a>Exint0ISR</STRONG> (ARM, 32 bytes, Stack size 8 bytes, vector.o(i.Exint0ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Exint0ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector.o(i.Init_VIC)
</UL>
<P><STRONG><a name="[249dde4]"></a>I2C_Read</STRONG> (ARM, 148 bytes, Stack size 28 bytes, iic_module.o(i.I2C_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C_Read &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[249db50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
<LI><a href="#[249db8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
<LI><a href="#[249dbc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nack
<LI><a href="#[249dc04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ack
<LI><a href="#[249dc40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
<LI><a href="#[249dda8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cread_byte
<LI><a href="#[249de20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMI2CDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[24a7420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_PowerOn
</UL>

<P><STRONG><a name="[24a7858]"></a>I2C_Write</STRONG> (ARM, 128 bytes, Stack size 28 bytes, iic_module.o(i.I2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C_Write &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[249db50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
<LI><a href="#[249db8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
<LI><a href="#[249dc04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ack
<LI><a href="#[249dc40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
<LI><a href="#[249de20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMI2CDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[24a73a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecialHandler
<LI><a href="#[24a7420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_PowerOn
<LI><a href="#[24a7678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyscanRoutine_Change
<LI><a href="#[24a8758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColdJnDegFunction
</UL>

<P><STRONG><a name="[249dda8]"></a>I2Cread_byte</STRONG> (ARM, 220 bytes, Stack size 4 bytes, iic_module.o(i.I2Cread_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2Cread_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[249de20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMI2CDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[249dcf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max73290_IIC_Read
<LI><a href="#[249dde4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
</UL>

<P><STRONG><a name="[24a781c]"></a>IO_Init</STRONG> (ARM, 392 bytes, Stack size 0 bytes, i_0_bsp.o(i.IO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[24a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[253343c]"></a>IncreamentDigit</STRONG> (ARM, 464 bytes, Stack size 8 bytes, app_layer_2.o(i.IncreamentDigit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = IncreamentDigit
</UL>
<BR>[Calls]<UL><LI><a href="#[2530bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[24a7678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyscanRoutine_Change
</UL>

<P><STRONG><a name="[24a77e0]"></a>Init_PLL</STRONG> (ARM, 168 bytes, Stack size 0 bytes, clock.o(i.Init_PLL))
<BR><BR>[Called By]<UL><LI><a href="#[24a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24a77a4]"></a>Init_TIMER0</STRONG> (ARM, 64 bytes, Stack size 0 bytes, timer_config_int.o(i.Init_TIMER0))
<BR><BR>[Called By]<UL><LI><a href="#[24a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24a7768]"></a>Init_TIMER1</STRONG> (ARM, 64 bytes, Stack size 0 bytes, timer_config_int.o(i.Init_TIMER1))
<BR><BR>[Called By]<UL><LI><a href="#[24a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24a772c]"></a>Init_UART0</STRONG> (ARM, 156 bytes, Stack size 0 bytes, uart_base.o(i.Init_UART0))
<BR><BR>[Called By]<UL><LI><a href="#[24a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24a76f0]"></a>Init_UART1</STRONG> (ARM, 156 bytes, Stack size 0 bytes, uart_base.o(i.Init_UART1))
<BR><BR>[Called By]<UL><LI><a href="#[24a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24a76b4]"></a>Init_VIC</STRONG> (ARM, 200 bytes, Stack size 0 bytes, vector.o(i.Init_VIC))
<BR><BR>[Called By]<UL><LI><a href="#[24a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2533400]"></a>KeyscanRoutine</STRONG> (ARM, 364 bytes, Stack size 8 bytes, app_layer_2.o(i.KeyscanRoutine))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = KeyscanRoutine &rArr; Max73290_IIC_Write &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[249dcb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max73290_IIC_Write
<LI><a href="#[249dcf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max73290_IIC_Read
<LI><a href="#[24a7a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[24a7678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyscanRoutine_Change
</UL>

<P><STRONG><a name="[24a7678]"></a>KeyscanRoutine_Change</STRONG> (ARM, 1356 bytes, Stack size 8 bytes, app_layer_2.o(i.KeyscanRoutine_Change))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = KeyscanRoutine_Change &rArr; I2C_Write &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[249fba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorBlinkOff
<LI><a href="#[24a7858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[24a7a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[2533400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyscanRoutine
<LI><a href="#[253343c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreamentDigit
</UL>
<BR>[Called By]<UL><LI><a href="#[24a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24a2a10]"></a>LPC_ASC0_vSendData</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uart_base.o(i.LPC_ASC0_vSendData))
<BR><BR>[Called By]<UL><LI><a href="#[24a736c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitRequestPF
</UL>

<P><STRONG><a name="[24a5e18]"></a>LPC_ASC_vSendData</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uart_base.o(i.LPC_ASC_vSendData))
<BR><BR>[Called By]<UL><LI><a href="#[24a73e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WifiCmd
</UL>

<P><STRONG><a name="[24a763c]"></a>MachineLogic</STRONG> (ARM, 216 bytes, Stack size 0 bytes, application.o(i.MachineLogic))
<BR><BR>[Called By]<UL><LI><a href="#[24a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[249dcf4]"></a>Max73290_IIC_Read</STRONG> (ARM, 76 bytes, Stack size 8 bytes, iic_module.o(i.Max73290_IIC_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Max73290_IIC_Read &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[249db50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
<LI><a href="#[249db8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
<LI><a href="#[249dbc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nack
<LI><a href="#[249dc04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ack
<LI><a href="#[249dc40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
<LI><a href="#[249dda8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cread_byte
<LI><a href="#[249de20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMI2CDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2533400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyscanRoutine
</UL>

<P><STRONG><a name="[249dcb8]"></a>Max73290_IIC_Write</STRONG> (ARM, 112 bytes, Stack size 12 bytes, iic_module.o(i.Max73290_IIC_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Max73290_IIC_Write &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[249db50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
<LI><a href="#[249db8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
<LI><a href="#[249dc04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ack
<LI><a href="#[249dc40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
<LI><a href="#[249de20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMI2CDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2533400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyscanRoutine
</UL>

<P><STRONG><a name="[253190c]"></a>OLEDI2CDelay</STRONG> (ARM, 24 bytes, Stack size 0 bytes, oled_i2c.o(i.OLEDI2CDelay))
<BR><BR>[Called By]<UL><LI><a href="#[25315c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledWaitForAck
<LI><a href="#[2531600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledSendStop
<LI><a href="#[253163c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledSendStart
<LI><a href="#[25316b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledSendByte
<LI><a href="#[2531894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisplayChar
</UL>

<P><STRONG><a name="[25318d0]"></a>OLED_Clear</STRONG> (ARM, 204 bytes, Stack size 8 bytes, oled_i2c.o(i.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_Clear &rArr; oledSendCommand &rArr; oledSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25315c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledWaitForAck
<LI><a href="#[253163c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledSendStart
<LI><a href="#[2531678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledSendCommand
<LI><a href="#[25316b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2531768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[2531894]"></a>OLED_DisplayChar</STRONG> (ARM, 184 bytes, Stack size 16 bytes, oled_i2c.o(i.OLED_DisplayChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_DisplayChar &rArr; OLED_GoToNextLine &rArr; OLED_SetCursor &rArr; oledSendCommand &rArr; oledSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25315c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledWaitForAck
<LI><a href="#[25316b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledSendByte
<LI><a href="#[25317e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GoToNextLine
<LI><a href="#[253190c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDI2CDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[253181c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisplayString
<LI><a href="#[2531858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisplayNumber
</UL>

<P><STRONG><a name="[2531858]"></a>OLED_DisplayNumber</STRONG> (ARM, 336 bytes, Stack size 32 bytes, oled_i2c.o(i.OLED_DisplayNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OLED_DisplayNumber &rArr; OLED_DisplayChar &rArr; OLED_GoToNextLine &rArr; OLED_SetCursor &rArr; oledSendCommand &rArr; oledSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2530bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[2531894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisplayChar
</UL>
<BR>[Called By]<UL><LI><a href="#[24a7588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_Displayroutine
</UL>

<P><STRONG><a name="[253181c]"></a>OLED_DisplayString</STRONG> (ARM, 40 bytes, Stack size 8 bytes, oled_i2c.o(i.OLED_DisplayString))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_DisplayString &rArr; OLED_DisplayChar &rArr; OLED_GoToNextLine &rArr; OLED_SetCursor &rArr; oledSendCommand &rArr; oledSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2531894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisplayChar
</UL>
<BR>[Called By]<UL><LI><a href="#[24a7588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_Displayroutine
</UL>

<P><STRONG><a name="[25317e0]"></a>OLED_GoToNextLine</STRONG> (ARM, 64 bytes, Stack size 4 bytes, oled_i2c.o(i.OLED_GoToNextLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_GoToNextLine &rArr; OLED_SetCursor &rArr; oledSendCommand &rArr; oledSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25316f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[2531894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisplayChar
</UL>

<P><STRONG><a name="[2531768]"></a>OLED_Init</STRONG> (ARM, 216 bytes, Stack size 4 bytes, oled_i2c.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OLED_Init &rArr; OLED_Clear &rArr; oledSendCommand &rArr; oledSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2531678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledSendCommand
<LI><a href="#[25318d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[24a75c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_DisplayInit
</UL>

<P><STRONG><a name="[25316f0]"></a>OLED_SetCursor</STRONG> (ARM, 132 bytes, Stack size 12 bytes, oled_i2c.o(i.OLED_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OLED_SetCursor &rArr; oledSendCommand &rArr; oledSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25315c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledWaitForAck
<LI><a href="#[253163c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledSendStart
<LI><a href="#[2531678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledSendCommand
<LI><a href="#[25316b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[24a7588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_Displayroutine
<LI><a href="#[25317e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GoToNextLine
</UL>

<P><STRONG><a name="[249fb6c]"></a>OffCursor</STRONG> (ARM, 20 bytes, Stack size 4 bytes, lcd_driver_4line.o(i.OffCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OffCursor &rArr; lcd_write_control &rArr; lcd_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[249f9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_control
</UL>
<BR>[Called By]<UL><LI><a href="#[249fba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorBlinkOff
</UL>

<P><STRONG><a name="[24a75c4]"></a>Oled_DisplayInit</STRONG> (ARM, 16 bytes, Stack size 8 bytes, oled_displayroutine.o(i.Oled_DisplayInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Oled_DisplayInit &rArr; OLED_Init &rArr; OLED_Clear &rArr; oledSendCommand &rArr; oledSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2531768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24a7588]"></a>Oled_Displayroutine</STRONG> (ARM, 252 bytes, Stack size 8 bytes, oled_displayroutine.o(i.Oled_Displayroutine))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Oled_Displayroutine &rArr; OLED_DisplayNumber &rArr; OLED_DisplayChar &rArr; OLED_GoToNextLine &rArr; OLED_SetCursor &rArr; oledSendCommand &rArr; oledSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25316f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
<LI><a href="#[253181c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisplayString
<LI><a href="#[2531858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisplayNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[24a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25333c4]"></a>PositionOfCursor</STRONG> (ARM, 68 bytes, Stack size 8 bytes, app_layer_2.o(i.PositionOfCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PositionOfCursor &rArr; BlinkCursorRoutine &rArr; goto_cursor &rArr; lcd_write_control &rArr; lcd_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[249fc20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkCursorRoutine
</UL>
<BR>[Called By]<UL><LI><a href="#[24a7948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorBlinkRoutine
</UL>

<P><STRONG><a name="[24a38d4]"></a>RTC_ISR</STRONG> (ARM, 84 bytes, Stack size 8 bytes, vector.o(i.RTC_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector.o(i.Init_VIC)
</UL>
<P><STRONG><a name="[24a745c]"></a>RXDECODERS484DATA</STRONG> (ARM, 1344 bytes, Stack size 8 bytes, powermeter.o(i.RXDECODERS484DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RXDECODERS484DATA &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2530c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[24a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24a7420]"></a>Read_PowerOn</STRONG> (ARM, 640 bytes, Stack size 8 bytes, application.o(i.Read_PowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Read_PowerOn &rArr; I2C_Read &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[249dde4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
<LI><a href="#[24a7858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[24a7a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[24a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24a36b8]"></a>Recive485_service</STRONG> (ARM, 512 bytes, Stack size 0 bytes, powermeter.o(i.Recive485_service))
<BR><BR>[Called By]<UL><LI><a href="#[24a3820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0ISR
</UL>

<P><STRONG><a name="[249dc40]"></a>Send_Byte</STRONG> (ARM, 204 bytes, Stack size 16 bytes, iic_module.o(i.Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[249de20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMI2CDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[249dcb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max73290_IIC_Write
<LI><a href="#[249dcf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max73290_IIC_Read
<LI><a href="#[249dde4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
<LI><a href="#[24a7858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
</UL>

<P><STRONG><a name="[24a73e4]"></a>Send_WifiCmd</STRONG> (ARM, 7756 bytes, Stack size 24 bytes, esp8266.o(i.Send_WifiCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Send_WifiCmd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24a5e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_ASC_vSendData
<LI><a href="#[2530bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[2530c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[24a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24a73a8]"></a>SpecialHandler</STRONG> (ARM, 640 bytes, Stack size 8 bytes, application.o(i.SpecialHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SpecialHandler &rArr; I2C_Write &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[24a7858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[24a7ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eeprom_Intern_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[24a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24a3898]"></a>Timer0ISR</STRONG> (ARM, 632 bytes, Stack size 24 bytes, vector.o(i.Timer0ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Timer0ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[2530bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector.o(i.Init_VIC)
</UL>
<P><STRONG><a name="[24a385c]"></a>Timer1ISR</STRONG> (ARM, 204 bytes, Stack size 8 bytes, vector.o(i.Timer1ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer1ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector.o(i.Init_VIC)
</UL>
<P><STRONG><a name="[24a736c]"></a>TransmitRequestPF</STRONG> (ARM, 596 bytes, Stack size 16 bytes, powermeter.o(i.TransmitRequestPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TransmitRequestPF &rArr; ASCChecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[24a14bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCChecksum
<LI><a href="#[24a2a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_ASC0_vSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[24a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24a3820]"></a>UART0ISR</STRONG> (ARM, 84 bytes, Stack size 24 bytes, vector.o(i.UART0ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART0ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[24a36b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recive485_service
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector.o(i.Init_VIC)
</UL>
<P><STRONG><a name="[24a37e4]"></a>UART1ISR</STRONG> (ARM, 72 bytes, Stack size 24 bytes, vector.o(i.UART1ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART1ISR &rArr; ESPRxDecoder
</UL>
<BR>[Calls]<UL><LI><a href="#[24a5f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESPRxDecoder
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector.o(i.Init_VIC)
</UL>
<P><STRONG><a name="[249fb30]"></a>delay</STRONG> (ARM, 20 bytes, Stack size 0 bytes, lcd_driver_4line.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[249fa04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_byte
<LI><a href="#[249fc20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkCursorRoutine
</UL>

<P><STRONG><a name="[24a7a74]"></a>delay_ms</STRONG> (ARM, 44 bytes, Stack size 0 bytes, main.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[24a7420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_PowerOn
<LI><a href="#[24a7678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyscanRoutine_Change
<LI><a href="#[2533400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyscanRoutine
</UL>

<P><STRONG><a name="[249faf4]"></a>enable_lcd</STRONG> (ARM, 48 bytes, Stack size 0 bytes, lcd_driver_4line.o(i.enable_lcd))
<BR><BR>[Called By]<UL><LI><a href="#[249fa04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_byte
</UL>

<P><STRONG><a name="[249dc04]"></a>get_ack</STRONG> (ARM, 80 bytes, Stack size 4 bytes, iic_module.o(i.get_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[249de20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMI2CDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[249dcb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max73290_IIC_Write
<LI><a href="#[249dcf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max73290_IIC_Read
<LI><a href="#[249dde4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
<LI><a href="#[24a7858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
</UL>

<P><STRONG><a name="[24a5134]"></a>goto_cursor</STRONG> (ARM, 28 bytes, Stack size 8 bytes, lcd_driver_4line.o(i.goto_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = goto_cursor &rArr; lcd_write_control &rArr; lcd_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[249f9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_control
</UL>
<BR>[Called By]<UL><LI><a href="#[249fc20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkCursorRoutine
</UL>

<P><STRONG><a name="[249fa7c]"></a>lcd_out_data4</STRONG> (ARM, 24 bytes, Stack size 0 bytes, lcd_driver_4line.o(i.lcd_out_data4))
<BR><BR>[Called By]<UL><LI><a href="#[249fa04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_byte
</UL>

<P><STRONG><a name="[249fa04]"></a>lcd_write_byte</STRONG> (ARM, 52 bytes, Stack size 4 bytes, lcd_driver_4line.o(i.lcd_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lcd_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[249fa7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_out_data4
<LI><a href="#[249faf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_lcd
<LI><a href="#[249fb30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[249f9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_control
</UL>

<P><STRONG><a name="[249f9c8]"></a>lcd_write_control</STRONG> (ARM, 36 bytes, Stack size 8 bytes, lcd_driver_4line.o(i.lcd_write_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lcd_write_control &rArr; lcd_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[249fa04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[249fb6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffCursor
<LI><a href="#[249fba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorBlinkOff
<LI><a href="#[249fc20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkCursorRoutine
<LI><a href="#[24a5134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_cursor
</UL>

<P><STRONG><a name="[24a7a38]"></a>main</STRONG> (ARM, 108 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = main &rArr; Oled_Displayroutine &rArr; OLED_DisplayNumber &rArr; OLED_DisplayChar &rArr; OLED_GoToNextLine &rArr; OLED_SetCursor &rArr; oledSendCommand &rArr; oledSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[24a72f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simulation
<LI><a href="#[24a736c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitRequestPF
<LI><a href="#[24a73a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecialHandler
<LI><a href="#[24a73e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WifiCmd
<LI><a href="#[24a7420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_PowerOn
<LI><a href="#[24a745c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXDECODERS484DATA
<LI><a href="#[24a7588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_Displayroutine
<LI><a href="#[24a75c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_DisplayInit
<LI><a href="#[24a763c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MachineLogic
<LI><a href="#[24a7678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyscanRoutine_Change
<LI><a href="#[24a76b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_VIC
<LI><a href="#[24a76f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_UART1
<LI><a href="#[24a772c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_UART0
<LI><a href="#[24a7768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIMER1
<LI><a href="#[24a77a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIMER0
<LI><a href="#[24a77e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PLL
<LI><a href="#[24a781c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
<LI><a href="#[24a7948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorBlinkRoutine
<LI><a href="#[24a79c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init_PowerON
<LI><a href="#[24a86e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_timer
<LI><a href="#[24a8758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColdJnDegFunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[25316b4]"></a>oledSendByte</STRONG> (ARM, 204 bytes, Stack size 16 bytes, oled_i2c.o(i.oledSendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = oledSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[253190c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDI2CDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2531678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledSendCommand
<LI><a href="#[25316f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
<LI><a href="#[2531894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisplayChar
<LI><a href="#[25318d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[2531678]"></a>oledSendCommand</STRONG> (ARM, 64 bytes, Stack size 8 bytes, oled_i2c.o(i.oledSendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = oledSendCommand &rArr; oledSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25315c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledWaitForAck
<LI><a href="#[2531600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledSendStop
<LI><a href="#[253163c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledSendStart
<LI><a href="#[25316b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[25316f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
<LI><a href="#[2531768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[25318d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[253163c]"></a>oledSendStart</STRONG> (ARM, 112 bytes, Stack size 4 bytes, oled_i2c.o(i.oledSendStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = oledSendStart
</UL>
<BR>[Calls]<UL><LI><a href="#[253190c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDI2CDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2531678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledSendCommand
<LI><a href="#[25316f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
<LI><a href="#[25318d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[2531600]"></a>oledSendStop</STRONG> (ARM, 96 bytes, Stack size 4 bytes, oled_i2c.o(i.oledSendStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = oledSendStop
</UL>
<BR>[Calls]<UL><LI><a href="#[253190c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDI2CDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2531678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledSendCommand
</UL>

<P><STRONG><a name="[25315c4]"></a>oledWaitForAck</STRONG> (ARM, 76 bytes, Stack size 4 bytes, oled_i2c.o(i.oledWaitForAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = oledWaitForAck
</UL>
<BR>[Calls]<UL><LI><a href="#[253190c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDI2CDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2531678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledSendCommand
<LI><a href="#[25316f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
<LI><a href="#[2531894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisplayChar
<LI><a href="#[25318d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[249dbc8]"></a>send_nack</STRONG> (ARM, 76 bytes, Stack size 4 bytes, iic_module.o(i.send_nack))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = send_nack
</UL>
<BR>[Calls]<UL><LI><a href="#[249de20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMI2CDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[249dcf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max73290_IIC_Read
<LI><a href="#[249dde4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
</UL>

<P><STRONG><a name="[24a72f4]"></a>simulation</STRONG> (ARM, 296 bytes, Stack size 0 bytes, application.o(i.simulation))
<BR><BR>[Called By]<UL><LI><a href="#[24a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[249db8c]"></a>start</STRONG> (ARM, 108 bytes, Stack size 4 bytes, iic_module.o(i.start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = start
</UL>
<BR>[Calls]<UL><LI><a href="#[249de20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMI2CDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[249dcb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max73290_IIC_Write
<LI><a href="#[249dcf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max73290_IIC_Read
<LI><a href="#[249dde4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
<LI><a href="#[24a7858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
</UL>

<P><STRONG><a name="[249db50]"></a>stop</STRONG> (ARM, 96 bytes, Stack size 4 bytes, iic_module.o(i.stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = stop
</UL>
<BR>[Calls]<UL><LI><a href="#[249de20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMI2CDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[249dcb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max73290_IIC_Write
<LI><a href="#[249dcf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max73290_IIC_Read
<LI><a href="#[249dde4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
<LI><a href="#[24a7858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
</UL>

<P><STRONG><a name="[252c740]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[252c704]"></a>_fp_init</STRONG> (ARM, 4 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[252ec84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[24a97c0]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[24a97c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24a97c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24a9784]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[24a9784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24a9784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24a9748]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[24a9748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24a9748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24a970c]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[24a970c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24a970c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24a96d0]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[24a96d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24a96d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24a9694]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[24a9694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24a9694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24a8758]"></a>ColdJnDegFunction</STRONG> (ARM, 480 bytes, Stack size 8 bytes, main.o(i.ColdJnDegFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ColdJnDegFunction &rArr; I2C_Write &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[24a7858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[24a7ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eeprom_Intern_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[24a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24a86e0]"></a>watchdog_timer</STRONG> (ARM, 80 bytes, Stack size 0 bytes, main.o(i.watchdog_timer))
<BR><BR>[Called By]<UL><LI><a href="#[24a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2530d18]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2530bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[2530cdc]"></a>__arm_div4</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2530bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[2530ca0]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2530bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[252f29c]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[252f314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
